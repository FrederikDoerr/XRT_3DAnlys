% test ellipsoid fit

idx = find(XYZ(:,4) == 0);
XYZ(idx,:) = [];



% create the test data:
% radii
a = 1;
b = 2;
c = 3;
[ s, t ] = meshgrid( 0 : 0.1 : pi, 0 : 0.3 : pi );
x = a * cos(s) .* cos( t );
y = b * cos(s) .* sin( t );
z = c * sin(s);
% rotation
ang = pi/6;
xt = x * cos( ang ) - y * sin( ang );
yt = x * sin( ang ) + y * cos( ang );
% translation
shiftx = 4;
shifty = 5;
shiftz = 6;
x = xt + shiftx;
y = yt + shifty;
z = z  + shiftz;

% add noise:
noiseIntensity = 0.1; %
dx = randn( size( s ) ) * noiseIntensity;
dy = randn( size( s ) ) * noiseIntensity;
dz = randn( size( s ) ) * noiseIntensity;
x = x + dx;
y = y + dy;
z = z + dz;
x = x(:);
y = y(:);
z = z(:);
fprintf( 'Simulated average data deviation: %.5f\n', sqrt( sum( dx(:).^2 + dy(:).^2 + dz(:).^2 ) / size( x, 1 ) ) );

% do the fitting
[ center, radii, evecs, v, chi2 ] = ellipsoid_fit( [ XYZ(:,1:3) ], '' );
fprintf( 'Ellipsoid center: %.5g %.5g %.5g\n', center );
fprintf( 'Ellipsoid radii: %.5g %.5g %.5g\n', radii );
fprintf( 'Ellipsoid evecs:\n' );
fprintf( '%.5g %.5g %.5g\n%.5g %.5g %.5g\n%.5g %.5g %.5g\n', ...
    evecs(1), evecs(2), evecs(3), evecs(4), evecs(5), evecs(6), evecs(7), evecs(8), evecs(9) );
fprintf( 'Algebraic form:\n' );
fprintf( '%.5g ', v );
fprintf( '\nAverage deviation of the fit: %.5f\n', sqrt( chi2 / size( x, 1 ) ) );
fprintf( '\n' );

% draw data
figure;
figure; patch(isosurface(V_ROI,0.5),'faceColor','b','LineStyle','none')
% plot3(XYZ(:,1),XYZ(:,2),XYZ(:,3), '.r' );
hold on;

%draw fit
mind = min( XYZ(:,1:3) )-100;
maxd = max( XYZ(:,1:3) );
nsteps = 50;
step = ( maxd - mind ) / nsteps;
[ x, y, z ] = meshgrid( linspace( mind(1) - step(1), maxd(1) + step(1), nsteps ), linspace( mind(2) - step(2), maxd(2) + step(2), nsteps ), linspace( mind(3) - step(3), maxd(3) + step(3), nsteps ) );

Ellipsoid = v(1) *x.*x +   v(2) * y.*y + v(3) * z.*z + ...
          2*v(4) *x.*y + 2*v(5)*x.*z + 2*v(6) * y.*z + ...
          2*v(7) *x    + 2*v(8)*y    + 2*v(9) * z;
p = patch( isosurface( x, y, z, Ellipsoid, -v(10) ) );
hold off;
set( p, 'FaceColor', 'g', 'EdgeColor', 'none' );
view( -70, 40 );
axis vis3d equal;
camlight;
lighting phong;

%%
s = regionprops3(V_ROI,{...
    'Centroid',...
    'PrincipalAxisLength',...
    'Orientation'});

    a = s.PrincipalAxisLength(1)/2;
    b = s.PrincipalAxisLength(2)/2;
    c = s.PrincipalAxisLength(3)/2;
    
    Xc = s.Centroid(1);
    Yc = s.Centroid(2);
    Zc = s.Centroid(3);    
    
figure
imshow(bw,'InitialMagnification','fit')

t = linspace(0,2*pi,50);

hold on
for k = 1:length(s)
    a = s(k).PrincipalAxisLength(k,1)/2;
    b = s(k).PrincipalAxisLength(k,2)/2;
    c = s(k).PrincipalAxisLength(k,3)/2;
    Xc = s(k).Centroid(1);
    Yc = s(k).Centroid(2);
    Zc = s(k).Centroid(3);
    phi = deg2rad(-s(k).Orientation);
    x = Xc + a*cos(t)*cos(phi);
    y = Yc + b*cos(t)*sin(phi);
    z = Zc + c*sin(t);
    figure;
    plot3(x,y,z,'r','Linewidth',5)
end
hold off


funx = @(theta,phi) a*cos(theta).*cos(phi);
funy = @(theta,phi) b*cos(theta).*sin(phi);
funz = @(theta,phi) b*sin(theta);
figure;
fsurf(funx,funy,funz,[-pi/2 pi/2 -pi pi]) 

    x = Xc + funx(linspace(-pi/2,pi/2,100),linspace(-pi,pi,100));
    y = Yc + funy(linspace(-pi/2,pi/2,100),linspace(-pi,pi,100));
    z = Zc + funz(linspace(-pi/2,pi/2,100),linspace(-pi,pi,100));
    
    figure,plot3(x,y,z)
  %%
  s = regionprops3(V_ROI,{...
    'Centroid',...
    'PrincipalAxisLength',...
    'Orientation'});

    xr = s.PrincipalAxisLength(2)/2;
    yr = s.PrincipalAxisLength(1)/2;
    zr = s.PrincipalAxisLength(3)/2;
    
    Xc = s.Centroid(1);
    Yc = s.Centroid(2);
    Zc = s.Centroid(3);    
    
    phi = deg2rad(-s.Orientation(1));
    theta = deg2rad(-s.Orientation(2));
    psi = deg2rad(-s.Orientation(3));
    
    n = 20;
    
  [x,y,z] = ellipsoid(Xc,Yc,Zc,xr,yr,zr,n);
  
  XYZ_Elps = [x,y,z];
  
  %%
  addpath('H:\Matlab_Files\FileExchange\imInertiaEllipsoid\imInertiaEllipsoid')
  
  figure; hold on;
  isosurface(V_ROI,isovalue)
  figure; patch(isosurface(V_ROI,0.5),'faceColor','b','LineStyle','none')
  ELLI = [Xc,Yc,Zc,xr,yr,zr,s.Orientation(1),s.Orientation(2),s.Orientation(3)];
  drawEllipsoid(ELLI, 'FaceColor', 'r',);
  
  
[x,y,z] = drawEllipsoid(ELLI);

%DRAWELLIPSOID Draw a 3D ellipsoid
%
%   drawEllipsoid(ELLI)
%   Displays a 3D ellipsoid on current axis. ELLI is given by:
%   [XC YC ZC A B C PHI THETA PSI],
%   where (XC, YC, ZC) is the ellipsoid center, A, B and C are the half
%   lengths of the ellipsoid main axes, and PHI THETA PSI are Euler angles
%   representing ellipsoid orientation, in degrees.
%
%   Example
%   figure; hold on;
%   drawEllipsoid([10 20 30   50 30 10   5 10 0], 'FaceColor', 'g');
%   axis equal;
  
    orthoSlices3d(V_ROI, [60 80 13], [1 1 2.5]);
    axis equal;
    view(3);

    elli = imInertiaEllipsoid(V_ROI, [1 1 2.5]);
    drawEllipsoid(elli)

[ellipsoid labels] = imInertiaEllipsoid(V_ROI);
  